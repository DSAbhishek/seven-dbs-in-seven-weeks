curl -X POST -H "content-type:application/json" http://localhost:10018/mapred --data @-

# first check mapping
{"inputs":[["rooms","101"],["rooms","202"],["rooms","603"],["rooms","854"]],"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[key_int] = room_floor;return [data];}"}}]}
{"inputs":{"bucket":"rooms","key_filters":[["string_to_int"], ["between", 4200, 4299]]},"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[key_int] = room_floor;return [data];}"}}]}

{"inputs":{"bucket":"rooms","key_filters":[["or", [["string_to_int"], ["between", 4200, 4299]], [["string_to_int"], ["between", 4300, 4399]]]]},"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[key_int] = room_floor;return [data];}"}}]}

[["or", [["string_to_int"], ["between", 4200, 4299]], [["string_to_int"], ["between", 4300, 4399]]]]


# Write map and reduce functions against the rooms bucket to find the total guest capacity per floor.

# testing floor 1
{"inputs":[["rooms","101"],["rooms","102"],["rooms","103"],["rooms","154"]],"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[\"Floor \" + room_floor] = parsed_data.capacity;return [data];}"}},{"reduce":{"language":"javascript","source":"function(v) {var totals = {};for (var i in v) {for(var room_floor in v[i]) {if( totals[room_floor] ) totals[room_floor] += v[i][room_floor];else totals[room_floor] = v[i][room_floor];}}return [totals];}"}}]}
# all floors
{"inputs":"rooms","query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[\"Floor \" + room_floor] = parsed_data.capacity;return [data];}"}},{"reduce":{"language":"javascript","source":"function(v) {var totals = {};for (var i in v) {for(var room_floor in v[i]) {if( totals[room_floor] ) totals[room_floor] += v[i][room_floor];else totals[room_floor] = v[i][room_floor];}}return [totals];}"}}]}


# with filter floors 42 and 43
{"inputs":{"bucket":"rooms","key_filters":[["or", [["string_to_int"], ["between", 4200, 4299]], [["string_to_int"], ["between", 4300, 4399]]]]},"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[\"Floor \" + room_floor] = parsed_data.capacity;return [data];}"}},{"reduce":{"language":"javascript","source":"function(v) {var totals = {};for (var i in v) {for(var room_floor in v[i]) {if( totals[room_floor] ) totals[room_floor] += v[i][room_floor];else totals[room_floor] = v[i][room_floor];}}return [totals];}"}}]}

# testing with less_than
{"inputs":{"bucket":"rooms","key_filters":[["string_to_int"], ["less_than", 1000]]},"query":[{"map":{"language":"javascript","source":"function(v) {var parsed_data = JSON.parse(v.values[0].data);var key_int = v.key;var room_floor = Math.floor(key_int/100);var data = {};data[\"Floor \" + room_floor] = parsed_data.capacity;return [data];}"}},{"reduce":{"language":"javascript","source":"function(v) {var totals = {};for (var i in v) {for(var room_floor in v[i]) {if( totals[room_floor] ) totals[room_floor] += v[i][room_floor];else totals[room_floor] = v[i][room_floor];}}return [totals];}"}}]}
